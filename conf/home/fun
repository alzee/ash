#!/bin/bash
# vim:ft=sh
# My functions
# Create hard link ~/.fun when running ~/.ash/a.sh -L
# and ~/.fun will be sourced in ~/.bash_profile
# Export all these funcions and set $FUN_EXPORTED at the end of this file.

[ "$FUN_EXPORTED" ] && return # since these functions have been exported, we don't need to soure this file anymore

# use some useless dconf keys to store info is a good idea.

# functions names will be overriden by aliases, this is so sad
# Causes syntax error if the word is already a alias
# So remove all aliases
unalias -a

set -a

activate(){
    [ -f .venv/bin/activate ] && . .venv/bin/activate
}

t(){
    local d
    d=~/w/todo
    case $1 in
        "")
            v $d/todo
            ;;
        s)
            git -C $d status 2> /dev/null
            [ "$?" -eq 128 ] && echo -e $red${bold}Not a git repo $end
            ;;
        c)
            git -C $d add -A
            shift
            comment=${*:-nth}
            git -C $d commit -m "$comment"
            read -p "press any key in 5 sec to git push..." -n 1 -t5 i
            echo
            [ -n "$i" ] && echo -e "\nstarting push..." && git -C $d push
            ;;
    esac
}

jq_aws_instance_ip(){
    # use xargs only for removing quotes
    jq '.Reservations[0].Instances[0].PublicIpAddress' | xargs
}

jq_aws_instance_id(){
    # use xargs only for removing quotes
    jq '.Reservations[0].Instances[0].InstanceId' | xargs
}

append_to_hosts(){
    # example
    # append_to_hosts $(aws ec2 describe-instances | jq_aws_instance_ip) aws
    local ip=$1
    local hostname=$2
    local hosts=/etc/hosts
    sudo sed -i "/ $hostname$/d" $hosts
    sudo sed -i "\$a$ip $hostname" $hosts
}

run_a_aws_instance(){
    local id
    id=$(aws ec2 run-instances --launch-template LaunchTemplateName=min | jq '.Instances[0].InstanceId' | xargs | tee ~/.aws/instance_id)
    append_to_hosts $(aws ec2 describe-instances --instance-ids $id | jq_aws_instance_ip) aws
}

terminate_a_aws_instance(){
    local id
    # id=$(aws ec2 describe-instances | jq_aws_instance_id)
    id=$(< ~/.aws/instance_id)
    aws ec2 terminate-instances --instance-ids $id
}

b(){
    # Restore my key sequences if have any argument
    [ $1 ] && { bind -f ~/.inputrc; return; }

    # Otherwise, clear custom key sequences
    local i
    for i in $(bind -S | awk '{print $1}')
    do
        if [ ${#i} -gt 1 ]; then
            if [ $i = '\"' ]; then
                bind '"\"":self-insert'
            else
                bind -r "$i"
            fi
        else
            bind "$i":self-insert
        fi
    done
}

c(){
    cargo "$@"
}

d(){
    cd "$@"
}

e(){
    echo "$@"
}

f(){
    if [ "$1" ]; then
        (feh -. "$@" &)
    fi
}

g(){
    local comment i
    case $1 in
        "")
            git status 2> /dev/null
            [ "$?" -eq 128 ] && echo -e $red${bold}Not a git repo $end
            ;;
        c)
            git add -A
            shift
            comment=${*:-nth}
            git commit -m "$comment"
            read -p "press any key in 5 sec to git push..." -n 1 -t5 i
            echo
            [ -n "$i" ] && echo -e "\nstarting push..." && git push
            ;;
        i)
            git init
            githooks
            ;;
        *)
            git "$@"
            ;;
    esac
}

if [ "$ID" = FreeBSD ]; then
    ll(){
        command ls -l -G "$@"
    }
    # Put l.() { ...; } in one line to avoid vim wrong syntax indentation
    l.(){ command ls -Gd .* "$@"; }
    l(){
        command ls -G "$@"
    }
    ls(){
        # sudo command ls -G "$@"
        # sudo $(which ls) -G "$@"
        sudo ls -G "$@"
    }
else
    L(){
        command ls -Z "$@"
    }
    ll(){
        command ls -l --color=auto "$@"
    }
    LL(){
        command ls -lZ "$@"
    }
    l.(){ command ls -d .* --color=auto "$@"; }
    l(){
        command ls --color=auto "$@"
    }
    ls(){
        # sudo command ls --color=auto "$@"
        # sudo $(which ls) --color=auto "$@"
        sudo ls --color=auto "$@"
    }
fi

m(){
    [ $1 ] && { man $@; :; } || man bash
}

p(){
    local dns=1.1.1.1
    [ $1 ] || { ping $dns && return; }
    # If not only contain numbers and ., take it as a domain
    [[ $1 =~ ^[0-9.]+$ ]] || { ping $1 && return; }

    local c ip
    # https://stackoverflow.com/a/21336679/7714132
    ip=$(ip route get $dns | awk -F'src ' 'NR==1 {split($2,a," ");print a[1]}')
    c=$(awk -F'.' '{print NF}' <<< "$1")
    case "$c" in
        1)
            ping $(cut -d'.' -f1-3 <<< $ip)."$1"
            ;;
        2)
            ping $(cut -d'.' -f1-2 <<< $ip)."$1"
            ;;
        3)
            ping 10."$1"
            ;;
        4)
            ping "$1"
            ;;
    esac
}

v(){
    if [ "$1" ];then
        command vim "$@"
    else
        # $vim_default_file defined in .env
        #command vim $vim_default_file
        # $VIM_DEFAULT_SESSION defined in .env
        command vim -S $VIM_DEFAULT_SESSION
    fi
}

py(){
    python3 "$@"
}

wg(){
    sudo wg "$@"
}

sy(){
    case $1 in
        e)
            shift
            sudo systemctl enable --now "$@"
            ;;
        d)
            shift
            sudo systemctl disable --now "$@"
            ;;
        s)
            shift
            systemctl status "$@"
            ;;
        S)
            shift
            sudo systemctl stop "$@"
            ;;
        r)
            shift
            sudo systemctl restart "$@"
            ;;
        *)
            sudo systemctl "$@"
            ;;

    esac
}

dockertag(){
    [ "$1" ] || return
    wget -q https://registry.hub.docker.com/v1/repositories/$1/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}' | less
}

vim(){
    # sudo looks for external programs, not shell builtins, and not shell functions
    # sudo command vim "$@"
    # sudo $(which vim) "$@"
    sudo vim "$@"
}

play(){
    if [ "$1" ]; then
        (mpv --really-quiet "$@" &)
    else
        # if cmus is running
        # are we in matrix?
        # select cmus
        # not running
        # screen cmus

        # assign 'select' to a var just to void vim syntax check error. because 'select' is a bash builtin
        local c=select
        # assume we are in the matrix
        if pgrep cmus; then
            #screen -S $SCREEN_SESSION -X $c cmus
            cmus-remote -u
        else
            screen -T screen 8 cmus
            # don't need this anymore since we have setting 'resume'
            #sleep 0.5
            #cmus-remote -p
            # cmus always start with the first song although shuffle is on
            #cmus-remote -n
        fi
    fi
}

qr(){
    qrencode -t ansiutf8 "$@"
}

pvz(){
    local p=/.wine/drive_c/Program\ Files/Plants\ vs\ Zombies/PlantsVsZombies.exe
    wine ~/.wine/drive_c/Program\ Files/Plants\ vs\ Zombies/PlantsVsZombies.exe -changedir &> /dev/null &
}

mouse_speed_by_ctm(){
    local ctm
    ctm="Coordinate Transformation Matrix"
    # xinput set-prop 8 156 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000
    # id may change, use name instead
    local x y z
    if is_num $1 && [ "$MOUSE" -a "$ctm" ]; then
        x=$1 y=$1 z=$1
        xinput set-prop "$MOUSE" "$ctm" $x, 0, 0, 0, $y, 0, 0, 0, $z
    fi
}

enable_console(){
    sudo systemctl enable serial-getty@ttyS0.service
    sudo systemctl start serial-getty@ttyS0.service
}

reset_mysql_root_pw(){
    sudo mysqld_safe --skip-grant-tables --skip-networking
    # tell the database server to reload the grant tables
    echo 'mysql> FLUSH PRIVILEGES;'
    echo "mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';"
}

php_mssql(){
    echo apt install pear
    echo pecl channel-update pecl.php.net
    echo pecl install pdo_sqlsrv
    echo apt install unixodbc{,-dev}
    echo Remember the fucking ln in /etc/php/...
    echo dpkg -i msodbcsql17.... where to find? the fucing microsoft.com
    echo See some libmsodbcsql-17.3.so.1.1 file not found shit?
    echo ldd /opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.3.so.1.1
    echo and you will see libcrypto.so.1.0.2 and libssl.so.1.0.2 not found
    echo Now install libssl1.0.2, can not find in repo? Directly download from packages.debian.org
    echo Okay, enjoy your fucking MSSQL with php.
}

troubleshooting(){
    echo Selinux?
    echo Any typo?
    echo Is this config file including other config files?
    echo Version?
}

acme(){
    # Iusse certs with acme.sh, using CloudFlare API and DNS alias mode
    local dom certdir acme cmd alias
    #local CF_Token CF_Account_ID CF_Zone_ID
    #export CF_Token=""
    #export CF_Account_ID=""
    #export CF_Zone_ID=""
    echo we need CF_Token CF_Account_ID CF_Zone_ID

    [ -z "$1" ] && return

    dom="$1"
    alias="jiei.xyz"
    acme=~/.acme.sh/acme.sh
    cmd="sudo service apache2 force-reload"
    certdir=${3:-~/cert}

    $acme --issue -d "$dom" -d '*.'"$dom" --dns dns_cf --challenge-alias $alias
    $acme --install-cert -d "$dom" --key-file $certdir/$dom.key --cert-file $certdir/$dom.cer --fullchain-file $certdir/$dom.fullchain.cer --reloadcmd "$cmd"

    #$acme --renew -d "$dom"
    #$acme --issue -d "$dom" -d '*.'"$dom" --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please
    #$acme --renew -d "$dom" --yes-I-know-dns-manual-mode-enough-go-ahead-please
}

# print battery info
ba(){
    local f fd n s
    fd=$(cat /sys/class/power_supply/BAT1/charge_full_design)
    f=$(cat /sys/class/power_supply/BAT1/charge_full)
    n=$(cat /sys/class/power_supply/BAT1/charge_now)
    s=$(cat /sys/class/power_supply/BAT1/status)
    echo charge_full/charge_full_design
    echo $f/$fd=$(echo "scale=2;$f*100/$fd" | bc)%
    echo charge_now/charge_full
    echo $n/$f=$(echo "scale=2;$n*100/$f" | bc)%
    echo $s
}

cleanup(){
    # should i add a cron for this?
    ### vim undo file
    local d=~/.vim/undo/
    find $d -mtime +15 -delete
    ### ~/.cache 
    ### /var/cache
    ### /var/log
}

cmdnotfound(){
    # if last command return 127 (not found), do something with it
    # TODO how to deal with HISTCONTROL ignored command which don't have history?
    local cmd r=$?	# r=$? must at the first line or we'll get return code of `local' builtin
    if [ "$r" -eq 127 ]; then
        cmd=$(HISTTIMEFORMAT= history 1 | sed 's/^ *[0-9]\+ *//')
        # who_is her? OR Who is her?
        tts "${cmd//_/ }"
    fi
}

smb(){
    local sever share mountpoint user

    # -s to setup a samba service
    # if not installed
    sudo dnf install samba
    sudo smbpasswd -a $user
    # edit /etc/samba/smb.cnf
    sudo systemctl restart smb
    # firewalld
    # selinux

    # client side
    sudo mount.cifs //$server/$share $mountpoint -o guest,user=guest,uid=1000

    # if permission denied, should be selinux
}

nfs(){
    # server side
    # sudo systemctl restart nfs
    # edit /etc/exports
    # man exports

    # exportfs -ra

    # client side
    # mount server:share_dir somedir
    :
}

self_signed_cert(){
    local n
    n=nick
    openssl req -nodes -newkey rsa:4096 -keyout $n.key -x509 -days 3650 -out $n.cer
    cat $n.cer $n.key $n.pem
    #or
    #openssl req -nodes -x509 -newkey rsa:4096 -sha256 -days 3650 -out $n.pem -keyout $n.pem
}

grep(){
    command grep --color=auto "$@"
}

githooks(){
    # Run in root of working tree
    # then hooks in .githooks will be tracked and can be triggered whether or not "during a push",
    # as long as it's not a bare repo.
    if [ -d .git ]; then
        echo ln .githooks to .git/githooks
        mkdir -p .githooks
        ln -sf ../.githooks .git/githooks
        echo Done. Don\'t forget to run me on remote if you need to trigger push hooks.
    else
        echo Not a git dir
    fi
}

gen_ssh_keys_for_new_workstation() {
    local user not_copy_list station name
    user=$(id -un)
    not_copy_list='github gitlab drupal'

    if [ "$1" ]; then
        station=$1
    else
        cat << EOF
Usage:
Generate hosts ssh keys for new workstation. It will generate all remote hosts keys that current workstation have access.
$FUNCNAME <new_workstation>
EOF
return
    fi

    if [ -z "$DOMAIN" ]; then
        echo env DOMAIN not set.
        return
    fi

    for name in $(grep -o "\w*\.$DOMAIN" ~/.ssh/config)
    do
        i=${name%%.*}

        ssh-keygen -t ed25519 -f $i -C $user@$station -N ''

        scp $i $user@$station.$DOMAIN:.ssh/ && rm $i

        if [[ ! "$not_copy_list" =~ "$i" ]]; then
            ssh-copy-id -f -i $i.pub $i.$DOMAIN && rm $i.pub
        fi
    done

    scp ~/.ssh/config $user@$station.$DOMAIN:.ssh/
}

expecting_SSH2_MSG_KEX_ECDH_REPLY(){
    local if
    if=$1
    # https://serverfault.com/a/670081
    sudo ip li set mtu 1200 dev $if
}

are_u_sure(){
    read -n1 -p "Are you sure to exit? [y/N] "
    [ "$REPLY" != y ] && { echo; history -a; bash; }
}
#trap are_u_sure EXIT

# reload ~/.{env,fun}
rl(){
    FUN_EXPORTED=
    ENV_EXPORTED=
    . ~/.env
    . ~/.fun
}

let FUN_EXPORTED++

[ -f ~/.fun.local ] && . ~/.fun.local

set +a
