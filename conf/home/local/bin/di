#!/bin/env -S deno run --allow-net --allow-env --allow-run --allow-write --allow-read

// vim:ft=typescript

// import { writableStreamFromWriter } from "https://deno.land/std@0.164.0/streams/mod.ts";

if (Deno.args.length === 0) Deno.exit()

const KEY = Deno.env.get("DICTIONARYAPI_KEY")
if (KEY === undefined) {
  console.log('ENV DICTIONARYAPI_KEY not found')
  Deno.exit()
}

const HOME = Deno.env.get("HOME")
const dir = HOME + '/.di/'
const audioDir = dir + 'audio/'
const textDir = dir + 'text/'
await Deno.mkdir(audioDir, { recursive: true });
await Deno.mkdir(textDir, { recursive: true });

const word = Deno.args[0].toLowerCase()
let text

try {
  text = await Deno.readTextFile(textDir + word)
} catch (error) {
  if (error instanceof Deno.errors.NotFound) {
    let resp = await fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${word}?key=${KEY}`)
    text = await resp.text()
    await Deno.writeTextFile(textDir + word, text);
  }
}

let audio
const d = JSON.parse(text)

if (d[0].meta === undefined) {
  console.log("The word you've entered isn't in the dictionary. Try a spelling suggestion below.")
  console.log(...d)
  Deno.exit()
} 

for (let i of d) {
  let fl = ''
  let mw = ''
  if (i.fl) fl = i.fl
  if (i.hwi.prs) mw = i.hwi.prs[0].mw
  console.log(`%c${i.meta.id} %c${fl} ${mw}` , "color:red", "color:white")
  for (let j of i.shortdef) {
    console.log(`%c${j}`, "color: yellow")
  }
  if (i.hwi.prs && i.hwi.prs[0].sound && i.hwi.prs[0].sound.audio && !audio) {
    audio = i.hwi.prs[0].sound.audio
  }
}

if (audio) {
  let subdir = audio.substr(0, 1)
  const audioFile = audio + '.mp3'

  try {
    await Deno.stat(audioDir + audioFile)
  } catch (error) {
    if (error instanceof Deno.errors.NotFound) {
      // throw error;
      const fileResponse = await fetch(`https://media.merriam-webster.com/audio/prons/en/us/mp3/${subdir}/${audioFile}`)
      const buffer = await fileResponse.arrayBuffer()
      await Deno.writeFile(audioDir + audioFile, buffer)
    }
  }

  const p = Deno.run({
    cmd: ["mpv", "--really-quiet", audioDir + audioFile]
  })
  const status = await p.status();
}
